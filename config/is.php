<?php

/**
 * Конфигурация Is
 *
 * @version 0.0.4
 *
 * @author Роголев Дмитрий <work.drogolev@internet.ru>
 * @license MIT
 */

return [

    /**
     * * Имена таблиц, которые создает пакет.
     *
     * Пакет использует полиморфные отношения многие-ко-многим.
     *
     * Определяются две таблицы: таблица ролей и промежуточная таблица,
     * которая соединяет модели, использующие трейт HasRoles, с ролями.
     *
     * @link https://clck.ru/36JLPn Полиморфные отношения многие-ко-многим
     */
    'tables' => [
        'roles' => env('IS_TABLES_ROLES', 'roles'),
        'roleables' => env('IS_TABLES_ROLEABLES', 'roleables'),
    ],

    /**
     * * Имя полиморфной связи моделей.
     *
     * Используется в промежуточной таблице для полей {relation_name}_id и {relation_name}_type.
     * Например, roleable_id и roleable_type.
     *
     * В поле {relation_name}_id указывается идентификатор модели, которая связывается с ролью.
     * В поле {relation_name}_type указывается полное название модели,
     * например "\App\Models\Role", которая связывается с ролью.
     *
     * @link https://clck.ru/36JLPn Полиморфные отношения многие-ко-многим
     */
    'relations' => [
        'roleable' => env('IS_RELATIONS_ROLEABLE', 'roleable'),
    ],

    /**
     * * Разделитель строк.
     *
     * Используется для формирования slug'а роли.
     */
    'separator' => env('IS_SEPARATOR', '.'),

    /**
     * * Имена моделей, которые используются в пакете.
     */
    'models' => [

        // Роль
        'role' => env('IS_MODELS_ROLE', \dmitryrogolev\Is\Models\Role::class),

        // Промежуточная модель
        'roleable' => env('IS_MODELS_ROLEABLE', \dmitryrogolev\Is\Models\Roleable::class),

    ],

    /**
     * * Имена фабрик, которые используются в пакете.
     */
    'factories' => [

        // Фабрика роли
        'role' => env('IS_FACTORIES_ROLE', \dmitryrogolev\Is\Database\Factories\RoleFactory::class),

    ],

    /**
     * * Имена сидеров, которые используются в пакете.
     */
    'seeders' => [

        // Сидер роли
        'role' => env('IS_SEEDERS_ROLE', \dmitryrogolev\Is\Database\Seeders\RoleSeeder::class),

    ],

    /**
     * * Флаги
     */
    'uses' => [

        /**
         * * Использовать ли миграции по умолчанию.
         *
         * Если вы не публикуете или не создаете свои миграции таблиц для этого пакета,
         * то установите данный флаг в true.
         */
        'migrations' => (bool) env('IS_USES_MIGRATIONS', false),

        /**
         * * Использовать ли сидеры по умолчанию.
         *
         * Если вы хотите использовать сидеры по умолчанию, установите данный флаг в true.
         */
        'seeders' => (bool) env('IS_USES_SEED', false),

        /**
         * * Регистрировать ли директивы blade (is, endis, role, endrole, level, endlevel).
         *
         * Директивы is и role предоставляют одинаковый функционал.
         *
         * Эти директивы применимы только к модели пользователя,
         * использующего трейт "\dmitryrogolev\Is\Traits\HasRoles".
         *
         * @link https://clck.ru/36Ls42 Директивы Blade
         */
        'blade' => (bool) env('IS_USES_BLADE', true),

        /**
         * * Регистрировать ли посредники (is, role, level).
         *
         * Посредники is и role предоставляют одинаковый функционал.
         *
         * Эти посредники применимы только к модели пользователя,
         * использующего трейт "\dmitryrogolev\Is\Traits\HasRoles".
         *
         * @link https://clck.ru/36LsKF Посредники
         */
        'middlewares' => (bool) env('IS_USES_MIDDLEWARES', true),

        /**
         * * Следует ли подгружать отношение модели после изменения.
         *
         * По умолчанию после подключения или удаления отношения(-ий) моделей с ролями,
         * отношения будут подгружены заново.
         * Это означает, что модель всегда будет хранить актуальные отношения,
         * однако также это означает увеличение количества запросов к базе данных.
         *
         * Если вы делаете много операций с ролями,
         * рекомендуется отключить данную функцию для увеличения производительности.
         */
        'load_on_update' => (bool) env('IS_USES_LOAD_ON_UPDATE', true),

        /**
         * * Следует ли расширять метод "is" модели Eloquent.
         *
         * Метод is по умолчанию сравнивает две модели.
         * Трейт HasRoles расширяет данный метод.
         * Это означает, что данным методом по прежнему можно будет пользоваться для сравнения моделей,
         * но, если передать идентификатор, slug или модель роли, то будет вызван метод hasRole,
         * проверяющий наличие роли у модели.
         *
         * Если вы не хотите, чтобы данный метод был расширен, установите данный флаг в false.
         *
         * @link https://clck.ru/36LeCR Метод is модели Eloquent
         */
        'extend_is_method' => (bool) env('IS_USES_EXTEND_IS_METHOD', true),

        /**
         * * Использовать ли иерархию ролей на основе уровней.
         *
         * Иерархия подразумевает, что вышестоящая в иерархии роль имеет допуск
         * к функционалу нижестоящих относительно нее ролей.
         * Например, если модель имеет роль с уровнем 5,
         * то проверка наличия роли с уровнем 3 будет положительна.
         *
         * $user->attachRole($admin); // level 3
         * $user->hasRole($moderator); // level 2 // true
         *
         * Если эта функция включена, то вам не придется добавлять пользователю все роли,
         * которые ему необходимы, а будет достаточно добавить только одну вышестоящую в иерархии роль.
         */
        'levels' => (bool) env('IS_USES_LEVELS', true),

        /**
         * * Использовать ли функционал API?
         *
         * При использовании данной опции будут зарегистрированы маршруты для доступа к контроллерам.
         */
        'api' => (bool) env('IS_USES_API', false),

    ],
];
